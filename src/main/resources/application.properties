server.port=8443
server.port.http=8080
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

devtools.livereload.enabled=true

#JSP와 같이 사용할 경우 뷰 구분을 위해 컨트롤러가 뷰 이름을 반환할때 thymeleaf/ 로 시작하면 타임리프로 처리하도록 view-names 지정
spring.thymeleaf.view-names=thymeleaf/*
spring.thymeleaf.prefix=classpath:templates/
spring.thymeleaf.suffix=.html
#thymeleaf를 사용하다 수정 사항이 생길 때 수정을 하면 재시작을 해줘야 한다. 이를 무시하고 브라우저 새로고침시 수정사항 반영을 취해 cache=false
spring.thymeleaf.cache=false
spring.thymeleaf.check-template-location=true

#Hikari
spring.datasource.hikari.username=username
spring.datasource.hikari.password=password
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.connection-test-query=SELECT 1

#h2 + jasypt
spring.datasource.url=jdbc:h2:mem:test
#spring.datasource.username=user
#spring.datasource.password=
#spring.datasource.url=ENC(ANsvLFNZfFWEIMzkN/aeB9jeQ+2M/m+2)
spring.datasource.username=ENC(9YBqqwwhFVIBPG1htIctwCPjDESulzfv)
spring.datasource.password=ENC(qoBnX5kWjOiEPJrEqpqF+xCbgEfofaA0)
spring.datasource.drive-class-name=org.h2.Driver
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.SQL=debug
logging.level.org.hibernate.type.descriptor.sql=trace

# 프로필 설정
spring.profiles.active=local

#오류 응답에 exception의 내용을 포함할지 여부 (TRUE, FALSE)
server.error.include-exception=true 
#오류 응답에 stacktrace 내용을 포함할지 여부 (ALWAYS, NEVER, ON_TRACE_PARAM)
server.error.include-stacktrace=always 
#오류 응답을 처리할 핸들러(ErrorController)의 path
server.error.path=/error
#브라우저 요청에 대해 서버 오류시 기본으로 노출할 페이지를 사용할지 여부 (TRUE, FALSE)
server.error.whitelabel.enabled=false 

#swagger
spring.mvc.pathmatch.matching-strategy=ant_path_matcher

#내장 tomcat 설정
tomcat.ajp.protocol=AJP/1.3
tomcat.ajp.port=8009
tomcat.ajp.enabled=true
tomcat.ajp.address=0.0.0.0
tomcat.ajp.allowedRequestAttributesPattern=.*

#https 설정
server.ssl.key-store=keystore.p12
server.ssl.key-store-password=tndus0824!
server.ssl.keyStoreType=PKCS12
server.ssl.keyAlias=springboot

#jasypt 설정
jasypt.encryptor.bean=jasyptStringEncryptor

#JWT(JSON Web Token) 토큰 기반 인증
jwt.password=testPassword

#kafka 설정
spring.kafka.bootstrap-servers=192.168.111.128:9092
# consumer bootstrap servers가 따로 존재하면 설정
#spring.kafka.consumer.bootstrap-servers=192.168.111.128:9092
# 식별 가능한 Consumer Group Id
spring.kafka.consumer.group-id=testgroup
# Kafka 서버에 초기 offset이 없거나, 서버에 현재 offset이 더 이상 존재하지 않을 경우 수행할 작업을 설정
# latest: 가장 최근에 생산된 메시지로 offeset reset
# earliest: 가장 오래된 메시지로 offeset reset
# none: offset 정보가 없으면 Exception 발생
spring.kafka.consumer.auto-offset-reset=earliest
# 데이터를 받아올 때, key/value를 역직렬화
# JSON 데이터를 받아올 것이라면 JsonDeserializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# producer bootstrap servers가 따로 존재하면 설정
#spring.kafka.producer.bootstrap-servers=192.168.111.128:9092
# 데이터를 보낼 때, key/value를 직렬화
# JSON 데이터를 보낼 것이라면 JsonDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
message.topic.name=test